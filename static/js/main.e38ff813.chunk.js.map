{"version":3,"sources":["logo.svg","Select.js","Option.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Select","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","arrOption","children","map","el","state","viewSelect","isVisibl","value","element","find","setState","console","log","concat","_this2","arrElements","index","react_default","a","createElement","className","key","onClick","onClickHendle","hidden","React","Component","Option","App","src_Select","src_Option","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCkDzBC,2BA/CX,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACN,IAAMQ,EAAYR,EAAMS,SAASC,IAAI,SAAAC,GAAE,OAAIA,EAAGX,QAF/B,OAGfC,EAAKW,MAAQ,CACTJ,YACAK,WAAYL,EAAU,GAAGC,SACzBK,UAAU,GANCb,6EAULc,GAEV,IAAMC,EAAUZ,KAAKQ,MAAMJ,UAAUS,KAAK,SAAAN,GAAE,OAAIA,EAAGI,QAAUA,IAC7DX,KAAKc,SAAS,CACVL,WAAYG,EAAQP,SACpBK,UAAWV,KAAKQ,MAAME,WAE1BK,QAAQC,IAAR,kBAAAC,OAA8BL,EAAQP,SAAtC,uCAGK,IAAAa,EAAAlB,KACCmB,EAAcnB,KAAKQ,MAAMJ,UAAUE,IAAI,SAACC,EAAIa,GAC9C,OAEAC,EAAAC,EAAAC,cAAA,OACIC,UAAWN,EAAKV,MAAMC,aAAeF,EAAGF,SAAW,kBAAoB,SACvEoB,IAAKL,EACLM,QAAS,kBAAMR,EAAKS,cAAcT,EAAKV,MAAMJ,UAAUgB,GAAOT,SAE7DO,EAAKV,MAAMJ,UAAUgB,GAAOf,YAIrC,OACIgB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAYxB,KAAKQ,MAAME,SAAW,oBAAsB,mBACzDgB,QAAS,kBAAMR,EAAKJ,SAAS,CAACJ,UAAWQ,EAAKV,MAAME,aAEnDV,KAAKQ,MAAMC,YAGhBY,EAAAC,EAAAC,cAAA,OAAKK,OAAQ5B,KAAKQ,MAAME,UAAYS,WA1C/BU,IAAMC,YCMZC,MANf,SAAgBnC,GACZ,OACIyB,EAAAC,EAAAC,cAAA,WAAM3B,EAAMe,QCmBLqB,mLAfX,OACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACU,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAD,CAAQvB,MAAM,UAAd,YACAU,EAAAC,EAAAC,cAACW,EAAD,CAAQvB,MAAM,UAAd,UACAU,EAAAC,EAAAC,cAAA,UAAQZ,MAAM,UAAd,UACAU,EAAAC,EAAAC,cAACW,EAAD,CAAQvB,MAAM,WAAd,WACAU,EAAAC,EAAAC,cAACW,EAAD,CAAQvB,MAAM,SAAd,SACAU,EAAAC,EAAAC,cAACW,EAAD,CAAQvB,MAAM,SAAd,2BAVUmB,aCMEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e38ff813.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nclass Select extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        const arrOption = props.children.map(el => el.props);\r\n        this.state = {\r\n            arrOption,\r\n            viewSelect: arrOption[3].children,\r\n            isVisibl: true,\r\n        }\r\n    }\r\n\r\n    onClickHendle(value) {\r\n        \r\n        const element = this.state.arrOption.find(el => el.value === value);\r\n        this.setState({\r\n            viewSelect: element.children, \r\n            isVisibl: !this.state.isVisibl\r\n        })\r\n        console.log(`New value is  \"${element.children}\"`)\r\n    }\r\n\r\n    render() {\r\n        const arrElements = this.state.arrOption.map((el, index) => {\r\n            return (\r\n                \r\n            <div\r\n                className={this.state.viewSelect === el.children ? \"Option Selected\" : \"Option\"}\r\n                key={index} \r\n                onClick={() => this.onClickHendle(this.state.arrOption[index].value)}\r\n            >\r\n                {this.state.arrOption[index].children}\r\n            </div>\r\n            )\r\n        });\r\n        return (\r\n            <div>\r\n                <div className= {this.state.isVisibl ? \"Option Mets-close\" : \"Option Mets-open\"}\r\n                    onClick={() => this.setState({isVisibl: !this.state.isVisibl})}\r\n                >\r\n                    {this.state.viewSelect}\r\n                </div>\r\n\r\n                <div hidden={this.state.isVisibl}>{ arrElements }</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Select","import React from \"react\";\r\n\r\nfunction Option(props) {\r\n    return (\r\n        <div>{props.value}</div>\r\n    )\r\n}\r\n\r\nexport default Option","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Select from './Select';\nimport Option from \"./Option\";\n\nclass App extends Component {\n  render() {\n    return (\n    <div className=\"Container\">\n      <Select>\n        <Option value=\"select\">Dropdown</Option>\n        <Option value=\"delete\">Delete</Option>\n        <option value=\"rename\">Rename</option>\n        <Option value=\"preview\">Preview</Option>\n        <Option value=\"close\">Close</Option>\n        <Option value=\"other\">Separated link</Option>\n      </Select>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}